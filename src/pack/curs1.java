package pack; /*создаем пакет pack
    package - это некий контейнер, который используется для того, чтобы изолировать имена классов. 
    Наш класс curs1 будет заключен в пакет pack. После того как пакет создан можно не беспокоится
    о возможных конфликтах, которые могли бы возникнуть если бы кто-нибудь еще создал класс с именем curs1
    */

import java.awt.*; /*импортируем библиотеку графического интерфейса awt
                   Все стандартные классы, поставляемые с системой Java хранятся в пакете java
                   Пакет AWT (загружается java.awt) содержит набор классов, поволяющих 
                   выполнять графические операции и создавать элементы управления.
                   "*" - означает что библиотека awt включает все свои элементы 
                   */
import java.awt.event.*; /*импортируем под-пакет awt.event
		   Все стандартные классы, поставляемые с системой Java хранятся в пакете java
                   Объект event предназначен для описания возможных событий с классом
                   В нашей программе используются Action события
                   */
import javax.swing.*; /*импортируем библиотеку swing
                   Swing — библиотека для создания графического интерфейса для программ на языке Java.
                   Swing предоставляет более гибкие интерфейсные компоненты и имеет
                   более широкий набор функций, чем библиотека AWT.
                   "*" - означает что библиотека swing ыключает все свои элементы (jbutton,jlabel и т.д.)
                   */ 

public class curs1 extends JFrame { 
      /*создание класса curs1 - наследник стандартного класса JFrame
      public - открытый уровень доступа, т.е. наш класс curs1 доступен из любого места, любому классу
      class - зарезервированное слово.Оно говорит транслятору, что мы собираемся описать новый класс (в нашем случае curs1)
      Описание класса curs1 располагается между открывающей фигурной скобкой({) и закрывающей фигурной скобкой(})
      extends указывает на то, что curs1 — это подкласс класса JFrame
      JFrame - класс в библиотеке Swing, представляющий собой окно с рамкой и строкой заголовка
        */                          
	private JTextField textField1,textField2,textField3; 
			/*объявление текстовых полей
			модификатор доступа private означает, что
			переменные textField1,textField2,textField3-доступны только внутри класса curs1 и нигде больше        
                        */
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		/*модификатор доступа public означает что метод main(String[] args) виден и доступен любому классу
		static означает, что нам не нужно создавать экземпляр (копию) объекта curs1 в памяти,чтобы использовать этот метод
		модификатор void означает, что метод main(String[] args) не будет по итогам своей работы 
                        возвращать какой-то конкретный результат  в программу которая его вызвала (например, какое-то число)
		main - Java-интерпретатор получив команду интерпритировать класс начинает свою работу с вызова метода main.
		String args[]-объявляет параметр с именем args,который является массивом объектов-представителей класса String(String-встроенный класс работы со строками)
		*/
		EventQueue.invokeLater(new Runnable() {  
			public void run() { 
				/*модификатор доступа public означает что метод run() виден и доступен любому классу
				модификатор void означает, что метод run() не будет по итогам своей работы 
                                          возвращать какой-то конкретный результат  в программу которая его вызвала (например, какое-то число)
				метод run() не имеет аргументов, так как он с пустыми скобками
				*/
				try {
					curs1 frame = new curs1();
						//Оператор new создает экземпляр класса curs1,возвращает ссылку на созданный объект		
					frame.setVisible(true); // Чтобы отобразить окно на экране, вызывается данный метод с параметром true
				} catch (Exception e) {
					e.printStackTrace();//метод, определенный в классе Exception и используется, чтобы печатать информацию относительно исключения, то есть, как оно произошло и какой строке кода
				} 
					/*
					Исключение (Exception) — сигнал отправляемый программой в интерпретатор, 
                                            о возникновении нештатной (исключительной) ситуации во время исполнения кода.
                                        Чтобы противостоять и обрабатывать ошибки времени выполнения, нужно просто поместить код, 
                                        который вы хотите наблюдать, внутрь блока try. 
                                        Непосредственно за блоком try следует включить конструкцию catch, которая специфицирует тип перехватываемого исключения
					*/
			}
		});
	}

	/**
	 * Create the frame.
	 */
	static double razmer1, razmer2, razmer3; /*объявление переменных razmer1, razmer2, razmer3
                                                 static означает что переменные razmer1, razmer2, razmer3 принадлежат классу, а не определенному объекту
						 Эти переменные мы можем использовать без каких-либо объектов данного класса
                                                 double означает что переменные вещественного типа
						 */
	public curs1() { /*указываем конструктор
                         модификатор доступа public означает что метод curs1 виден и доступен любому классу*/
		setTitle("Расчет планировки"); //название окна
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //приложение закрывается по закрытию формы
		setBounds(100, 100, 250, 250); // положение и размер окна
		getContentPane().setLayout(new BorderLayout(0, 0));
                                /*получаем панель содержимого (ContentPane) с установкой менеджера компоновки BorderLayout(0, 0)
                                Менеджер размещения BorderLayout делит контейнер на пять неравных областей, полностью заполняя каждую область одним компонентом
                                Области получили географические названия NORTH, SOUTH, WEST, EAST И CENTER
                                BorderLayout(0, 0)означает что между областями остаются промежутки в 0 пикселей
                                */
		JPanel panel = new JPanel(); 
                                /*создание панели
                                Панель JPanel — это элемент управления, представляющий собой прямоугольное пространство, на котором можно размещать другие элементы.
                                Оператор new создает экземпляр класса JPanel
                                */
		getContentPane().add(panel, BorderLayout.CENTER);/*доавляем созданную панель в контейнер
                                                                  панель располагается в центре
                                                                  */
		panel.setLayout(null);//не использовать менеджер компоновки
		
	
	
		
		JLabel label = new JLabel("Ведите длину бани (в метрах):");//создание элемента для отображения фиксированного текста("Ведите длину бани (в метрах):")
		label.setBounds(20, 5, 210, 30);/*положение и размер компоненты label (первые две цифры указывают координаты верхнего левого угла, 
                                                третья цифра - ширину, четвертая цифра - длину)
                                                */
		label.setHorizontalAlignment(SwingConstants.CENTER);//расположение текста компоненты label (Ведите длину бани (в метрах):) по центру
		panel.add(label);//добавление компонента label на панель

		
		textField1 = new JTextField();//создаем текстовое поле
		textField1.setBounds(40, 30, 170, 30);//положение и размер текстового поля
		panel.add(textField1);//добаляем текстовое поле на панель
		textField1.setColumns(5);
		
		JLabel label1 = new JLabel("Введите ширину бани (в метрах):");//создание элемента для отображения фиксированного текста("Ведите ширину бани (в метрах):")
		label1.setBounds(20, 55, 210, 30);/*положение и размер компоненты label1 (первые две цифры указывают координаты верхнего левого угла, 
                                                третья цифра - ширину, четвертая цифра - длину)
                                                */
		label1.setHorizontalAlignment(SwingConstants.CENTER);//расположение текста компоненты label1 (Ведите длину бани (в метрах):) по центру
		panel.add(label1);//добавление компонента label1 на панель
		
		textField2 = new JTextField();//создаем текстовое поле
		textField2.setBounds(40, 80, 170, 30);//положение и размер текстового поля
		panel.add(textField2);//добаляем текстовое поле на панель
		textField2.setColumns(10);
		
		JLabel label2 = new JLabel("Введите высоту бани (в метрах):");//создание элемента для отображения фиксированного текста("Ведите высоту бани (в метрах):")
		label2.setBounds(20, 105, 210, 30);/*положение и размер компоненты label1 (первые две цифры указывают координаты верхнего левого угла, 
                                                третья цифра - ширину, четвертая цифра - длину)
                                                */
		label2.setHorizontalAlignment(SwingConstants.CENTER);//расположение текста компоненты label2 (Ведите длину бани (в метрах):) по центру
		panel.add(label2);//добавление компонента label2 на панель

		
		textField3 = new JTextField();//создаем текстовое поле
		textField3.setBounds(40, 130, 170, 30);//положение и размер текстового поля
		panel.add(textField3);//добаляем текстовое поле на панель
		textField3.setColumns(10);
		
		
		
		JButton button = new JButton("Расчет"); //создание кнопки "Расчет"
		button.setBounds(40, 165, 170, 30);//положение и размер кнопки
		panel.add(button); // добавление кнопки на панель
		
		
		button.addActionListener(new ActionListener()  //добалвение слушателя ActionListener к кнопке "Расчет"             
 	   {                                                         
 	    public void actionPerformed(ActionEvent e)  
                         /*ActionListener" имеет метод "actionPerformed" объекта "ActionEvent", 
	      	который реализуется путем простого вызова обработчика событий ActionPerformed.
                Модификатор доступа public означает что метод "actionPerformed" виден и доступен любому классу  
                модификатор void означает, что метод run() не будет по итогам своей работы 
                                          возвращать какой-то конкретный результат  в программу которая его вызвала (например, какое-то число)*/          
 	    {  
     	// что происходит при нажатии на кнопку
 	    	if (textField1.getText().equals("")||textField2.getText().equals("")||textField3.getText().equals(""))//проверка тестовых полей на пустоту
 	    	JOptionPane.showMessageDialog(null,"Заполните все поля"); 
                                                   //Вывод сообщения "Заполните все поля" если поля не заполнены                                                      
 	    	else {
                //преобразование строк в числа методом Double.parseDouble (получение значений в переменных)
 		razmer1 = Double.parseDouble(textField1.getText());
  	    	razmer2 = Double.parseDouble(textField2.getText());
  	    	razmer3 = Double.parseDouble(textField3.getText());
 	    	
  	    			if (razmer3<2) //проверка значения высоты бани
  	    			JOptionPane.showMessageDialog(null,"Высота бани должна быть больше либо равна 2 метрам"); //Вывод сообщения если высота бани меньше 2
  	    			else{
  	    					if (razmer1<=0||razmer2<=0) //проверка значении длины и ширины бани
  	    					JOptionPane.showMessageDialog(null,"Длина и ширина бани должна быть больше 0"); //Вывод сообщения если поля не заполнены 	
  	    					else{
  	    	curs2 dial=new curs2(); //Оператор new создает экземпляр класса curs2,возвращает ссылку на созданный объект
 	    	dial.setVisible(true); //делаем видимым новое окно
	        }}}
 	    }
});
		
}
}